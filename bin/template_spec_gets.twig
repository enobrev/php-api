<?php
    namespace {{ spec.namespace.spec }}\{{ table.name }};

    use Adbar\Dot;
    use Psr\Http\Message\ResponseInterface;
    use Psr\Http\Message\ServerRequestInterface;
    use Psr\Http\Server\MiddlewareInterface;
    use Psr\Http\Server\RequestHandlerInterface;

    use Enobrev\API\DataMap;
    use Enobrev\ORM\Exceptions\DbException;
    use Enobrev\API\FullSpec\Component\Reference;
    use Enobrev\API\HTTP;
    use Enobrev\API\Method;
    use Enobrev\API\Middleware\ResponseBuilder;
    use Enobrev\API\Param;
    use Enobrev\API\Spec;
    use Enobrev\API\SpecInterface;

    use {{ spec.namespace.spec }}\_components;
    use {{ spec.namespace.table }};

    class {{ spec.name }} implements SpecInterface, MiddlewareInterface {
        public function spec(): Spec {
            return Spec::create()
                ->httpMethod      (Method\{{ spec.http_method }})
                ->path            ('{{ spec.path_prefix}}/{{ table.name }}')
                ->summary         ('List {{ table.name }}')
                ->description     ('Get listing of `{{ table.name }}`')
                ->scopes          ({{ spec.scopes|raw }})
                ->tag             ('{{ table.name }}')
                ->queryParams     ([
                    'page'     => Param\_Integer::create()->default(1)->description('Current Page of `{{ table.name }}`'),
                    'per'      => Param\_Integer::create()->default(100)->description('Number of `{{ table.name }}` per page of Data'),
                    'search'   => Param\_String::create()->default(null)->description('Search term.  Can be a plain string or in the format field:value'),
                    'sort'     => Param\_String::create()->default(null)->description('`{{ table.name }}` field to sort by'){% if has_date %},{% endif %}

{% if has_date %}
                    'sync'     => Param\_String::create()->default(null)->description('Get only `{{ table.name }}` with an updated date since the date in `sync`')
{% endif %}
                ])
                ->response(HTTP\OK, Reference::create(_components\{{ table.name }}::RESPONSE_SUCCESS));
        }

        /**
         * @param ServerRequestInterface $oRequest
         * @param RequestHandlerInterface $oHandler
         *
         * @throws DbException
         * @return ResponseInterface
         */
        public function process(ServerRequestInterface $oRequest, RequestHandlerInterface $oHandler): ResponseInterface {
            $aQueryParams   = $oRequest->getQueryParams();
            $sSearch        = $aQueryParams['search'];
            $sSort          = $aQueryParams['sort'];
            $iPage          = $aQueryParams['page'];
            $iPer           = $aQueryParams['per'];
{% if has_date %}
            $sSync          = $aQueryParams['sync'];
{% endif %}

            $oResponse      = ResponseBuilder::get($oRequest);
            $oResponse      = $this->getResponse($oResponse, $iPage, $iPer, $sSearch, $sSort{% if has_date %}, $sSync{% endif %});
            $oRequest       = ResponseBuilder::update($oRequest, $oResponse);

            return $oHandler->handle($oRequest);
        }

        /**
         * @param Dot         $oResponse
         * @param int         $iPage
         * @param int         $iPer
         * @param string|null $sSearch
         * @param string|null $sSort
         * @param string|null $sSync
         *
         * @return Dot
         *
         * @throws DbException
         */
        protected function getResponse(Dot $oResponse, int $iPage, int $iPer, ?string $sSearch = null, ?string $sSort = null, ?string $sSync = null): Dot {
            $oBaseTable = new {{ table.class }};
            $aSearch    = DataMap::convertSearchTablesToORMTables($oBaseTable, $sSearch);
            $aSort      = DataMap::convertSortTablesToORMTables($oBaseTable,   $sSort);

            $o{{ table.plural }} = {{ table.class_plural }}::getForCMS($iPage, $iPer, $aSearch, $aSort{% if has_date %}, $sSync {% endif %});

            $oResponse = _components\{{ table.name }}::add{{ table.plural }}ToResponse($oResponse, $o{{ table.plural }});

            foreach($o{{ table.plural }} as $o{{ table.title }}) {
{% if primary|length > 1 %}
                $oResponse->push('sorts.{{ table.name }}', "{% for field in primary %}{{ '{' }}$o{{ table.title }}->{{ field.name }}->getValue(){{ '}' }}{% if not loop.last %}-{% endif %}{% endfor %}");
{% else %}
                $oResponse->push('sorts.{{ table.name }}', $o{{ table.title }}->{{ primary.0.name }}->getValue());
{% endif %}
            }

            $oResponse->set('counts.{{ table.name }}', {{ table.class_plural }}::countForCMS($aSearch));

            return $oResponse;
        }
    }

// generated from template_spec_gets.twig